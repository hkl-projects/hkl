### the DISPATCHER is responsible for job management
[dispatcher]
type = local # run local
#type = singlecore # run local
ncores = 16 # optionally, specify number of cores (autodetect by default)

# specificy destination file using scan numbers
#destination = {projection}_{subprojection}_{first}-{last}.hdf5
destination = qcustom_{first}-{last}.hdf5
overwrite = false

### choose an appropriate INPUT class and specify custom options
[input]##
#type = sixs:flyscanuhvs70 # refers to class Sixs in BINoculars/backends/sixs.py
type = sixs:sbsuhv # refers to class Sixs in BINoculars/backends/sixs.py

nexusdir = /nfs/ruche-sixs/sixs-soleil/com-sixs/2022/Run5/20220739_kutyla/yti86_3
inputrange=1087-1121

## approximate number of images per job, only useful when running on the oar cluster
target_weight = 100

# technical data for this particular input class
detector = ImXpadS140
centralpixel = 282, 115   # x,y
sdd = 1.161          # sample to detector distance (m)
detrot = 90
# attenuation_coefficient = 1.8
maskmatrix = /nfs/ruche-sixs/sixs-soleil/com-sixs/2022/Run5/20220739_kutyla/y227yh2/mask_nxs00025_20221122_19h01.npy

[projection]

#type = sixs:hklprojection # refers to HKProjection in BINoculars/backends/sixs.py
#type = sixs:qxqyqzprojection # refers to QxQyQz Projection in BINoculars/backends/sixs.py
#type = sixs:AnglesProjection # refers to Angles Projection (delta, gamma, tth) in BINoculars/backends/sixs.py
type = qcustom # refers to HKProjection in BINoculars/backends/sixs.py
subprojection = q_tth_timestamp

resolution = 0.005, 0.005, 200
#resolution = 0.002, 0.002, 0.004  # or just give 1 number for all dimensions
#limits = [0.7:1,-1.6:-1.3,:]

#omega_offset = 0
#source /usr/local/applications/diffractions/binoculars/v0.0.1/env.sh
